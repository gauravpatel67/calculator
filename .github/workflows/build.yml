name: Build and Run Tests

on:
  push:
    branches:
      - master  # Trigger this workflow on pushes to the master branch
  workflow_dispatch:  # Allow manual triggering

jobs:
  run_tests:
    name: Run Tests and Generate Coverage
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: ${{ github.workspace }}  # Set the PYTHONPATH to the GitHub workspace

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Specify the version of Python you want to use

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov  # Install pytest and pytest-cov plugin

      # Step 4: Run tests with code coverage
      - name: Run all tests and generate coverage report
        run: |
          pytest --maxfail=5 --disable-warnings --cov=. --cov-report=xml:coverage.xml --junitxml=test-results.xml  # Run tests and generate coverage and test result reports

  build:
    name: Build and Analyze with SonarQube
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate analysis

      # Step 2: Run SonarQube scan
      - uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # SonarQube token from secrets
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # SonarQube server URL from secrets
        with:
          args: |
            -Dsonar.tests=.  # Tell SonarQube where your tests are located
            -Dsonar.junit.reportPaths=test-results.xml  # Path to test results in JUnit format
            -Dsonar.python.coverage.reportPaths=coverage.xml  # Path to coverage report
